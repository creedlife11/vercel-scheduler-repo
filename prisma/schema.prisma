// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("VIEWER") // VIEWER, EDITOR, ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  teamMemberships TeamMember[]
  auditLogs       AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members   TeamMember[]
  artifacts Artifact[]
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   String @default("MEMBER") // MEMBER, ADMIN

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model Artifact {
  id          String   @id @default(cuid())
  teamId      String
  name        String
  type        String   // CSV, XLSX, JSON
  data        String   // JSON string of the artifact data
  metadata    String?  // Additional metadata as JSON
  createdAt   DateTime @default(now())
  createdBy   String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId, createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // LOGIN, LOGOUT, GENERATE_SCHEDULE, DOWNLOAD_ARTIFACT, etc.
  resource  String?  // Resource affected (team ID, artifact ID, etc.)
  metadata  String?  // Additional context as JSON
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([action, createdAt])
}