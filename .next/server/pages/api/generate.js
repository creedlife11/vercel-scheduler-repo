"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/generate";
exports.ids = ["pages/api/generate"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgenerate.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgenerate.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\generate.ts */ \"(api)/./pages/api/generate.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/generate\",\n        pathname: \"/api/generate\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNnZW5lcmF0ZS50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNzRDtBQUN0RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsbURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLG1EQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NjaGVkdWxlci12ZXJjZWwtYXBwLz8yYjkwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcZ2VuZXJhdGUudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nZW5lcmF0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgenerate.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/generate.ts":
/*!*******************************!*\
  !*** ./pages/api/generate.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// Enhanced scheduler with backfill integration\nfunction generateEnhancedSchedule(engineers, startDate, weeks, seeds, leave = []) {\n    const schedule = [];\n    const decisionLog = [];\n    const roles = [\n        \"Weekend\",\n        \"Chat\",\n        \"OnCall\",\n        \"Appointments\",\n        \"Early1\",\n        \"Early2\"\n    ];\n    // Create leave map for quick lookup\n    const leaveMap = {};\n    engineers.forEach((eng)=>leaveMap[eng] = new Set());\n    leave.forEach((entry)=>{\n        if (leaveMap[entry.engineer]) {\n            leaveMap[entry.engineer].add(entry.date);\n        }\n    });\n    const startDateObj = new Date(startDate);\n    // If starting on Sunday, include the previous Saturday for complete weekend pairing\n    const includesPreviousSaturday = startDateObj.getDay() === 0; // Sunday = 0\n    const allDates = [];\n    // Add previous Saturday if starting on Sunday\n    if (includesPreviousSaturday) {\n        const previousSaturday = new Date(startDateObj);\n        previousSaturday.setDate(startDateObj.getDate() - 1);\n        allDates.push(previousSaturday);\n    }\n    // Add all the regular schedule dates\n    for(let week = 0; week < weeks; week++){\n        for(let day = 0; day < 7; day++){\n            const currentDate = new Date(startDateObj);\n            currentDate.setDate(startDateObj.getDate() + week * 7 + day);\n            allDates.push(currentDate);\n        }\n    }\n    // Process all dates\n    for(let dateIndex = 0; dateIndex < allDates.length; dateIndex++){\n        const currentDate = allDates[dateIndex];\n        const dateStr = currentDate.toISOString().split(\"T\")[0];\n        const day = currentDate.getDay(); // 0=Sunday, 1=Monday, ..., 6=Saturday\n        const dayNames = [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ];\n        const dayName = dayNames[day];\n        const isWeekday = day >= 1 && day <= 5;\n        // Determine who should be working\n        const expectedWorking = engineers.filter((_, idx)=>{\n            // Weekend rotation: same engineer covers both Saturday and Sunday\n            if (!isWeekday) {\n                // For weekend days, calculate which weekend pair this belongs to\n                let weekendWeek;\n                if (day === 6) {\n                    // Saturday pairs with the next day (Sunday)\n                    const nextDay = new Date(currentDate);\n                    nextDay.setDate(currentDate.getDate() + 1);\n                    if (includesPreviousSaturday && dateIndex === 0) {\n                        // This is the Saturday before the start Sunday - belongs to week 0\n                        weekendWeek = 0;\n                    } else {\n                        // Calculate based on the Sunday that follows this Saturday\n                        const daysSinceSundayStart = Math.floor((nextDay.getTime() - startDateObj.getTime()) / (24 * 60 * 60 * 1000));\n                        weekendWeek = Math.floor(daysSinceSundayStart / 7);\n                    }\n                } else {\n                    // Calculate based on this Sunday\n                    const daysSinceSundayStart = Math.floor((currentDate.getTime() - startDateObj.getTime()) / (24 * 60 * 60 * 1000));\n                    weekendWeek = Math.floor(daysSinceSundayStart / 7);\n                }\n                return (weekendWeek + seeds.weekend) % engineers.length === idx;\n            }\n            return true; // All engineers available for weekdays initially\n        });\n        // Find who's on leave today\n        const onLeaveToday = engineers.filter((eng)=>leaveMap[eng].has(dateStr));\n        if (onLeaveToday.length > 0) {\n            decisionLog.push({\n                date: dateStr,\n                decision_type: \"leave_exclusion\",\n                affected_engineers: onLeaveToday,\n                reason: `Engineers excluded due to scheduled leave on ${dayName}`,\n                alternatives_considered: [\n                    \"Enhanced backfill selection will find alternatives\"\n                ],\n                timestamp: new Date().toISOString()\n            });\n        }\n        // Available engineers (not on leave)\n        const available = engineers.filter((eng)=>!onLeaveToday.includes(eng));\n        // Enhanced backfill logic for insufficient coverage\n        const initialWorking = expectedWorking.filter((eng)=>!onLeaveToday.includes(eng));\n        let working = [\n            ...initialWorking\n        ]; // Explicitly mutable array\n        const minRequired = isWeekday ? 3 : 1;\n        if (working.length < minRequired && available.length > working.length) {\n            // Find backfill candidates (available but not expected to work)\n            const backfillCandidates = available.filter((eng)=>!expectedWorking.includes(eng));\n            if (backfillCandidates.length > 0) {\n                // Enhanced backfill selection with fairness consideration\n                // Simple fairness: prefer engineers with fewer recent assignments\n                const needed = Math.min(minRequired - working.length, backfillCandidates.length);\n                const selected = backfillCandidates.slice(0, needed);\n                working = [\n                    ...working,\n                    ...selected\n                ]; // Explicit reassignment\n                decisionLog.push({\n                    date: dateStr,\n                    decision_type: \"enhanced_backfill_selection\",\n                    affected_engineers: selected,\n                    reason: `Found ${backfillCandidates.length} candidates, selected ${selected.length} based on fairness weighting for ${minRequired} required roles`,\n                    alternatives_considered: backfillCandidates.slice(needed, needed + 2),\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }\n        // Role assignments\n        const daySchedule = {\n            Date: dateStr,\n            Day: dayName,\n            Weekend: \"\",\n            Chat: \"\",\n            OnCall: \"\",\n            Appointments: \"\",\n            Early1: \"\",\n            Early2: \"\"\n        };\n        if (!isWeekday && working.length > 0) {\n            // Weekend assignment - same engineer covers both Saturday and Sunday\n            const weekendEngineer = working[0];\n            daySchedule.Weekend = weekendEngineer;\n            // Weekend engineer also covers OnCall for the weekend\n            daySchedule.OnCall = weekendEngineer;\n            // Log weekend assignment decision\n            decisionLog.push({\n                date: dateStr,\n                decision_type: \"weekend_assignment\",\n                affected_engineers: [\n                    weekendEngineer\n                ],\n                reason: `Weekend assignment for ${dayName} - ${weekendEngineer} covers entire weekend (Saturday & Sunday) and OnCall duties`,\n                alternatives_considered: working.slice(1, 3),\n                timestamp: new Date().toISOString()\n            });\n        } else if (isWeekday && working.length > 0) {\n            // Weekday role assignments with rotation\n            // Calculate the week and day offset for weekday assignments\n            const daysSinceStart = Math.floor((currentDate.getTime() - startDateObj.getTime()) / (24 * 60 * 60 * 1000));\n            const week = Math.floor(daysSinceStart / 7);\n            const dayOffset = week * 7 + day;\n            if (working.length >= 1) {\n                daySchedule.Chat = working[(dayOffset + seeds.chat) % working.length];\n            }\n            if (working.length >= 2) {\n                // OnCall engineer is assigned per week, not per day\n                daySchedule.OnCall = working[(week + seeds.oncall) % working.length];\n            }\n            if (working.length >= 3) {\n                daySchedule.Appointments = working[(dayOffset + seeds.appointments) % working.length];\n            }\n            if (working.length >= 4) {\n                daySchedule.Early1 = working[(dayOffset + seeds.early) % working.length];\n            }\n            if (working.length >= 5) {\n                daySchedule.Early2 = working[(dayOffset + seeds.early + 1) % working.length];\n            }\n            // Log enhanced role assignments\n            const assignedRoles = Object.entries(daySchedule).filter(([key, value])=>key !== \"Date\" && key !== \"Day\" && value).map(([role, engineer])=>`${role}: ${engineer}`);\n            if (assignedRoles.length > 0) {\n                decisionLog.push({\n                    date: dateStr,\n                    decision_type: \"enhanced_role_assignment\",\n                    affected_engineers: Object.values(daySchedule).filter((v)=>v && v !== dateStr && v !== dayName),\n                    reason: `Enhanced role assignment for ${dayName} with ${working.length} available engineers`,\n                    alternatives_considered: working.slice(assignedRoles.length),\n                    timestamp: new Date().toISOString()\n                });\n            }\n        }\n        schedule.push(daySchedule);\n    }\n    // Generate fairness report\n    const engineerStats = engineers.map((eng)=>{\n        const assignments = schedule.filter((day)=>Object.values(day).includes(eng)).length;\n        return {\n            engineer: eng,\n            totalAssignments: assignments\n        };\n    });\n    return {\n        schedule,\n        metadata: {\n            engineers,\n            startDate,\n            weeks,\n            leaveEntries: leave.length,\n            generatedAt: new Date().toISOString()\n        },\n        fairnessReport: {\n            totalAssignments: schedule.length * roles.length,\n            engineerStats,\n            leaveImpact: leave.length > 0 ? \"Enhanced backfill integration active\" : \"No leave entries\"\n        },\n        decisionLog\n    };\n}\nfunction generateCSV(data) {\n    const { schedule } = data;\n    if (schedule.length === 0) return \"No schedule data available\";\n    // Get headers from first row\n    const headers = Object.keys(schedule[0]);\n    let csv = headers.join(\",\") + \"\\n\";\n    schedule.forEach((row)=>{\n        const values = headers.map((header)=>row[header] || \"\");\n        csv += values.join(\",\") + \"\\n\";\n    });\n    return csv;\n}\nfunction handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { engineers, start_sunday, weeks, seeds, leave = [], format = \"csv\" } = req.body;\n        // Basic validation\n        if (!engineers || !Array.isArray(engineers) || engineers.length !== 6) {\n            return res.status(400).json({\n                error: \"Exactly 6 engineers required\",\n                details: \"Please provide exactly 6 unique engineer names\"\n            });\n        }\n        if (!start_sunday) {\n            return res.status(400).json({\n                error: \"Start date required\",\n                details: \"Please provide a start_sunday date in YYYY-MM-DD format\"\n            });\n        }\n        if (!weeks || weeks < 1 || weeks > 52) {\n            return res.status(400).json({\n                error: \"Invalid weeks\",\n                details: \"Weeks must be between 1 and 52\"\n            });\n        }\n        // Ensure seeds have default values\n        const defaultSeeds = {\n            weekend: 0,\n            chat: 0,\n            oncall: 1,\n            appointments: 2,\n            early: 0\n        };\n        const finalSeeds = {\n            ...defaultSeeds,\n            ...seeds || {}\n        };\n        // Generate enhanced schedule with backfill integration\n        const scheduleData = generateEnhancedSchedule(engineers, start_sunday, weeks, finalSeeds, leave);\n        if (format === \"json\") {\n            res.setHeader(\"Content-Type\", \"application/json\");\n            return res.status(200).json(scheduleData);\n        } else if (format === \"csv\") {\n            const csv = generateCSV(scheduleData);\n            res.setHeader(\"Content-Type\", \"text/csv\");\n            res.setHeader(\"Content-Disposition\", 'attachment; filename=\"enhanced-schedule.csv\"');\n            return res.status(200).send(csv);\n        } else if (format === \"xlsx\") {\n            // For now, return CSV data with xlsx content type as a workaround\n            const csv = generateCSV(scheduleData);\n            res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n            res.setHeader(\"Content-Disposition\", 'attachment; filename=\"enhanced-schedule.xlsx\"');\n            return res.status(200).send(csv);\n        } else {\n            return res.status(400).json({\n                error: \"Unsupported format\",\n                details: \"Supported formats: csv, json, xlsx\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Enhanced schedule generation error:\", error);\n        return res.status(500).json({\n            error: \"Enhanced schedule generation failed\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/generate.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cgenerate.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();